/**
 * ES5 中的字符串
 */
// 我们知道在 ES5 中定义一个字符串时会把字符串放入引号里，使用 ''（单引号）或 ""（双引号）来包裹字符串。
// 而对于多个字符串的拼接则需要使用 +（加号运算符） 来实现多个字符串的连接。
var a = 'imooc';
var b = 7;
console.log('a的值是:' + a + ', b的值是:' + b);  // a的值是:imooc, b的值是:7

// 在 ES5 中字符串还有一种拼接场景 —— 多行拼接，需要使用换行符 \n 和 + 组合实现。
var str = '第一行内容\n' +
    '第二行内容\n' +
    '第三行内容';
console.log(str);
/**
 第一行内容
 第二行内容
 第三行内容
 */

// 模版字符串的使用
/**
 * 有了模版字符串后就不需要使用加号了，通过使用 ````（反引号）中直接定义多行字符串和变量的拼接。如果是变量就包裹在 ${} 的大括号中。
 * 另外，在模版字符串中还可以使用表达式和使用函数标签的方式来增加字符串复杂的功能，扩展了字符串的功能。
 * 下面我们来看一下模版字符串都有哪些使用场景。
 */

// 字符串拼接
// 在 ES6 中可以使用反引号来声明一个字符变量的值。
let name = `小花花`;
// 上面例子中我们知道在 ES5 中拼接字符串需要用 + 运算符，但在 ES6 中把字符串写在 ```` 中，如果字符串中有变量可以使用 ${} 把变量放在大括号中。
let courseName = "慕课网";
let lang = "ES6";
//定义使用了变量的模板字符串
console.log(`这是${courseName}的${lang}课程!`);
// 上面的代码中把变量写在 ${} 的大括号中，在编译的过程会直接替换对应的变量。这种方式很明了地表达了字符串的完整性，更加直观地表达字符串的含义。

// 多行字符串


// 逻辑运算
var x = 1, y = 2;
// ES5
console.log("x + y = " + (x + y));
// ES6
console.log(`x + y = ${x + y}`);
// ES6模板字符串中直接插入表达式
var age = 19;
console.log(`小明是${age > 18 ? '成年人了!' : '未成年人!'}`);


// 带标签的模版字符串
// 带标签的模版字符串类似函数的使用，如果我们想在字符串中做一些复杂的逻辑判断，下面先看一下 ES5 的例子
var age1 = 7;
var str1 = ''
if (age1 > 18) {
    str1 = age1 + '岁成年了!';
} else {
    str1 = age1 + '岁还未成年!';
}
console.log('imooc今年' + str1); // imooc今年7岁还未成年

// 上面的代码是根据年龄判断是否成年了，ES5 方式很简单，就是一步一步地拼装数据，ES6 提供了带标签的模板字符串，它的使用方式如下：

function f(strArr, age) {
    var str = strArr[0];  // strArr是字符串被变量分割后的数组
    var str1 = "";
    if (age > 18) {
        str1 = age + "岁成年了!";
    } else {
        str1 = age + "岁还未成年!";
    }
    return `${str}${str1}`;
}

var result = f`imooc今年${age1}`;
console.log(result);